#!/usr/bin/env node

/**
 * Audiobook Integration Script for Verse and Volume
 * 
 * This script helps with the process of adding authentic audiobooks to the website.
 * It provides utilities for:
 * - Creating directory structures
 * - Downloading public domain audiobooks
 * - Processing audio files
 * - Updating book data files
 */

const fs = require('fs');
const path = require('path');
const https = require('https');

// Configuration
const CONFIG = {
  audioBaseDir: path.join(__dirname, '..', 'public', 'audio'),
  booksDir: path.join(__dirname, '..', 'public', 'audio', 'books'),
  poemsDir: path.join(__dirname, '..', 'public', 'audio', 'poems'),
  dataDir: path.join(__dirname, '..', 'src', 'data'),
  
  // Public domain audiobook sources
  sources: {
    librivox: 'https://librivox.org',
    internetArchive: 'https://archive.org',
    loyalBooks: 'https://www.loyalbooks.com'
  },
  
  // Audio quality settings
  audioSettings: {
    format: 'mp3',
    bitrate: '256k',
    sampleRate: '44100',
    channels: 2
  }
};

// Priority books for audiobook implementation
const PRIORITY_BOOKS = [
  {
    id: 'crime-and-punishment-dostoevsky',
    title: 'Crime and Punishment',
    author: 'Fyodor Dostoevsky',
    language: 'en',
    source: 'librivox',
    url: 'https://librivox.org/crime-and-punishment-by-fyodor-dostoyevsky/',
    chapters: 28, // Approximate number of chapters
    estimatedDuration: 72000, // 20 hours in seconds
    narrator: 'LibriVox Community',
    isPublicDomain: true
  },
  {
    id: 'pride-and-prejudice',
    title: 'Pride and Prejudice',
    author: 'Jane Austen',
    language: 'en',
    source: 'librivox',
    url: 'https://librivox.org/pride-and-prejudice-by-jane-austen/',
    chapters: 61,
    estimatedDuration: 43200, // 12 hours in seconds
    narrator: 'Karen Savage',
    isPublicDomain: true
  },
  {
    id: 'the-notebook',
    title: 'The Notebook',
    author: 'Nicholas Sparks',
    language: 'en',
    source: 'licensed',
    chapters: 12,
    estimatedDuration: 25200, // 7 hours in seconds
    isPublicDomain: false
  }
];

// Poetry collections for audio implementation
const PRIORITY_POETRY = [
  {
    id: 'shakespeare-sonnets',
    title: 'Shakespeare Sonnets',
    author: 'William Shakespeare',
    language: 'en',
    source: 'librivox',
    poems: 154,
    isPublicDomain: true
  },
  {
    id: 'mirza-ghalib-ghazals',
    title: 'Mirza Ghalib Ghazals',
    author: 'Mirza Ghalib',
    language: 'ur',
    source: 'custom',
    poems: 50,
    isPublicDomain: true
  }
];

/**
 * Create directory structure for audiobooks
 */
function createDirectoryStructure() {
  console.log('üìÅ Creating directory structure...');
  
  // Create base directories
  const dirs = [
    CONFIG.audioBaseDir,
    CONFIG.booksDir,
    CONFIG.poemsDir
  ];
  
  dirs.forEach(dir => {
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
      console.log(`‚úÖ Created: ${dir}`);
    }
  });
  
  // Create book-specific directories
  PRIORITY_BOOKS.forEach(book => {
    const bookDir = path.join(CONFIG.booksDir, book.id, book.language);
    if (!fs.existsSync(bookDir)) {
      fs.mkdirSync(bookDir, { recursive: true });
      console.log(`‚úÖ Created: ${bookDir}`);
    }
  });
  
  // Create poetry directories
  PRIORITY_POETRY.forEach(poetry => {
    const poetryDir = path.join(CONFIG.poemsDir, poetry.id, poetry.language);
    if (!fs.existsSync(poetryDir)) {
      fs.mkdirSync(poetryDir, { recursive: true });
      console.log(`‚úÖ Created: ${poetryDir}`);
    }
  });
  
  console.log('‚úÖ Directory structure created successfully!');
}

/**
 * Generate audiobook data template
 */
function generateAudiobookTemplate(book) {
  const template = `
// Audiobook data for ${book.title}
// Generated by audiobook-integration script

import { Book, AudioChapter } from '@/types';

export const ${book.id.replace(/-/g, '')}AudiobookData = {
  // Enable audiobook features
  hasAudio: true,
  isAudiobook: true,
  audioUrl: '/audio/books/${book.id}/${book.language}/full.mp3',
  audioDuration: ${book.estimatedDuration}, // ${Math.round(book.estimatedDuration / 3600)} hours
  narrator: '${book.narrator || 'Professional Narrator'}',
  audioQuality: 'high' as const,
  
  // Chapter-based audio files (update with actual chapter data)
  audioChapters: [
    ${generateChapterTemplates(book)}
  ] as AudioChapter[]
};

// Instructions for implementation:
// 1. Download audiobook files from: ${book.url || 'Licensed source'}
// 2. Process and place files in: public/audio/books/${book.id}/${book.language}/
// 3. Update chapter data with actual durations and titles
// 4. Merge this data with the existing book object in the data file
`;

  return template;
}

/**
 * Generate chapter templates
 */
function generateChapterTemplates(book) {
  const chapters = [];
  for (let i = 1; i <= (book.chapters || 10); i++) {
    const chapterNum = i.toString().padStart(2, '0');
    chapters.push(`    {
      id: 'chapter-${i}',
      title: 'Chapter ${i}', // Update with actual chapter title
      audioUrl: '/audio/books/${book.id}/${book.language}/chapter-${chapterNum}.mp3',
      duration: ${Math.round(book.estimatedDuration / book.chapters)}, // Estimated duration - update with actual
      startTime: ${Math.round((book.estimatedDuration / book.chapters) * (i - 1))} // Update with actual start time
    }`);
  }
  return chapters.join(',\n');
}

/**
 * Create README files with instructions
 */
function createInstructionFiles() {
  console.log('üìù Creating instruction files...');
  
  PRIORITY_BOOKS.forEach(book => {
    const bookDir = path.join(CONFIG.booksDir, book.id);
    const readmePath = path.join(bookDir, 'README.md');
    
    const readmeContent = `# ${book.title} - Audiobook Files

## Source Information
- **Title**: ${book.title}
- **Author**: ${book.author}
- **Language**: ${book.language.toUpperCase()}
- **Source**: ${book.source}
- **Public Domain**: ${book.isPublicDomain ? 'Yes' : 'No'}
${book.url ? `- **Download URL**: ${book.url}` : ''}

## File Structure
\`\`\`
${book.id}/
‚îú‚îÄ‚îÄ ${book.language}/
‚îÇ   ‚îú‚îÄ‚îÄ full.mp3              # Complete audiobook
‚îÇ   ‚îú‚îÄ‚îÄ chapter-01.mp3        # Individual chapters
‚îÇ   ‚îú‚îÄ‚îÄ chapter-02.mp3
‚îÇ   ‚îî‚îÄ‚îÄ ... (${book.chapters} chapters total)
‚îî‚îÄ‚îÄ README.md                 # This file
\`\`\`

## Implementation Steps

### 1. Download Audio Files
${book.isPublicDomain ? 
  `- Visit: ${book.url || 'LibriVox or Internet Archive'}
- Download individual chapter MP3 files
- Download complete audiobook if available` :
  `- Obtain licensed audiobook from authorized distributor
- Ensure proper licensing for web distribution`}

### 2. File Processing
- Convert to MP3 format (256 kbps recommended)
- Normalize audio levels to -16 LUFS
- Ensure consistent quality across all files
- Name files according to convention: chapter-01.mp3, chapter-02.mp3, etc.

### 3. Data Integration
- Update the book data file: \`src/data/novels/authors/.../\`
- Add audiobook properties using the generated template
- Test the AudiobookPlayer component

### 4. Quality Assurance
- Test playback in multiple browsers
- Verify chapter navigation works correctly
- Check audio quality and volume levels
- Test on mobile devices

## Estimated Specifications
- **Duration**: ~${Math.round(book.estimatedDuration / 3600)} hours
- **Chapters**: ${book.chapters}
- **File Size**: ~${Math.round(book.estimatedDuration / 60)} MB (estimated)
- **Narrator**: ${book.narrator || 'TBD'}

## Notes
- Ensure all files are properly licensed for distribution
- Test audio quality before final implementation
- Update chapter titles and durations with actual values
`;

    fs.writeFileSync(readmePath, readmeContent);
    console.log(`‚úÖ Created instructions: ${readmePath}`);
  });
}

/**
 * Generate audiobook templates for priority books
 */
function generateTemplates() {
  console.log('üìÑ Generating audiobook templates...');
  
  const templatesDir = path.join(__dirname, 'audiobook-templates');
  if (!fs.existsSync(templatesDir)) {
    fs.mkdirSync(templatesDir, { recursive: true });
  }
  
  PRIORITY_BOOKS.forEach(book => {
    const templatePath = path.join(templatesDir, `${book.id}-audiobook.ts`);
    const template = generateAudiobookTemplate(book);
    
    fs.writeFileSync(templatePath, template);
    console.log(`‚úÖ Generated template: ${templatePath}`);
  });
}

/**
 * Main execution function
 */
function main() {
  console.log('üéß Audiobook Integration Script for Verse and Volume');
  console.log('==================================================');
  
  try {
    // Create directory structure
    createDirectoryStructure();
    
    // Create instruction files
    createInstructionFiles();
    
    // Generate templates
    generateTemplates();
    
    console.log('\n‚úÖ Audiobook integration setup completed!');
    console.log('\nNext Steps:');
    console.log('1. Review the created directory structure');
    console.log('2. Follow the README instructions in each book directory');
    console.log('3. Download authentic audiobooks from the specified sources');
    console.log('4. Process and organize the audio files');
    console.log('5. Update book data files with audiobook properties');
    console.log('6. Test the implementation');
    
  } catch (error) {
    console.error('‚ùå Error during setup:', error.message);
    process.exit(1);
  }
}

// Run the script if called directly
if (require.main === module) {
  main();
}

module.exports = {
  createDirectoryStructure,
  generateAudiobookTemplate,
  createInstructionFiles,
  generateTemplates,
  PRIORITY_BOOKS,
  PRIORITY_POETRY,
  CONFIG
};
